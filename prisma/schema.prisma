generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid()) @db.Uuid
  clerkId         String   @unique
  email           String   @unique
  username        String   @unique @db.VarChar(50)
  displayName     String   @map("display_name") @db.VarChar(50)
  bio             String?
  profileImageUrl String?  @map("profile_image_url") @db.VarChar(255)
  coverImageUrl   String?  @map("cover_image_url") @db.VarChar(255)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  followers       Follow[] @relation("UserFollowers")
  following       Follow[] @relation("UserFollowing")
  likes           Like[]   @relation("UserLikes")
  posts           Post[]   @relation("UserPosts")

  @@map("users")
}

model Post {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id") @db.Uuid
  parentId  String?  @map("parent_id") @db.Uuid
  likes     Like[]   @relation("PostLikes")
  parent    Post?    @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Post[]   @relation("PostReplies")
  user      User     @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@map("posts")
}

model Follow {
  followerId  String   @map("follower_id") @db.Uuid
  followingId String   @map("following_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("follows")
}

model Like {
  userId    String   @map("user_id") @db.Uuid
  postId    String   @map("post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("likes")
}
